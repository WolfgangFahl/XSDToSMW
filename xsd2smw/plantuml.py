'''
Created on 2020-06-01

@author: wf
'''
import textwrap

class PlantUML(object):
    '''
    classdocs
    '''
    wrap=40


    def __init__(self,baseurl):
        '''
        Constructor
        '''
        self.baseurl=baseurl
        
    def fixName(self,name):
        name=name.replace(" ","_")
        return name
    
    def getSkinParams(self):
        skinParams="""
        ' BITPlan Corporate identity skin params
' Copyright (c) 2015 BITPlan GmbH
' see http://wiki.bitplan.com/PlantUmlSkinParams#BITPlanCI
' skinparams generated by com.bitplan.restmodelmanager
skinparam note {
  BackGroundColor #FFFFFF
  FontSize 12
  ArrowColor #FF8000
  BorderColor #FF8000
  FontColor black
  FontName Technical
}
skinparam component {
  BackGroundColor #FFFFFF
  FontSize 12
  ArrowColor #FF8000
  BorderColor #FF8000
  FontColor black
  FontName Technical
}
skinparam package {
  BackGroundColor #FFFFFF
  FontSize 12
  ArrowColor #FF8000
  BorderColor #FF8000
  FontColor black
  FontName Technical
}
skinparam usecase {
  BackGroundColor #FFFFFF
  FontSize 12
  ArrowColor #FF8000
  BorderColor #FF8000
  FontColor black
  FontName Technical
}
skinparam activity {
  BackGroundColor #FFFFFF
  FontSize 12
  ArrowColor #FF8000
  BorderColor #FF8000
  FontColor black
  FontName Technical
}
skinparam classAttribute {
  BackGroundColor #FFFFFF
  FontSize 12
  ArrowColor #FF8000
  BorderColor #FF8000
  FontColor black
  FontName Technical
}
skinparam interface {
  BackGroundColor #FFFFFF
  FontSize 12
  ArrowColor #FF8000
  BorderColor #FF8000
  FontColor black
  FontName Technical
}
skinparam class {
  BackGroundColor #FFFFFF
  FontSize 12
  ArrowColor #FF8000
  BorderColor #FF8000
  FontColor black
  FontName Technical
}
skinparam object {
  BackGroundColor #FFFFFF
  FontSize 12
  ArrowColor #FF8000
  BorderColor #FF8000
  FontColor black
  FontName Technical
}
hide Circle
' end of skinparams '
"""
        print(skinParams)
            
    def genClasses(self,result):
        for elementKey in result.keys():
            element=result[elementKey]
            #print(element)
            if element["kind"]=='Entity':
                template="""
  note top of %s
  [[%s %s]]
%s
end note
  class %s {
"""
                classname=self.fixName(element["name"])
                note=element["definition"]
                if not note: note=""
                #if isinstance(note,list):
                # d    note=' '.join(note)
                # https://stackoverflow.com/a/16430216/1497139
                note=textwrap.fill(note, PlantUML.wrap)
                link="%s/%s" % (self.baseurl,element["SchemaProperty"])
                print (template % (classname,link,classname,note,classname))
                self.genAttributes(elementKey)
                print ("  }")
                
    def prepareAttributes(self,result): 
        self.classMap={}           
        for elementKey in result.keys():
            element=result[elementKey]
            if element["kind"]=='Entity':
                self.classMap[elementKey]={}
        for elementKey in result.keys():
            element=result[elementKey]
            if element["kind"]=='Property':
                parent=element["parent"]
                if parent in self.classMap:
                    self.classMap[parent][elementKey]=element
                else:
                    print ("Warning parent %s is not defined" % parent)    
                #print("%s->%s" % (elementKey,element["parent"]))
        
    def genAttributes(self,classKey):
        attributes=self.classMap[classKey]
        for attrKey in attributes:
            element=attributes[attrKey]
            attrName=self.fixName(element["name"])
            print("   %s" % (attrName))
            
    def generate(self,result):
        """ generate a UML class diagram from the given SMW ask query result"""        
        self.prepareAttributes(result)
        self.intro()
        self.genClasses(result)
        self.getSkinParams()
        self.outro()
        
    def intro(self):    
        template="""
<uml>
"""                
        print (template % ())       
        
    def outro(self):
        print ("</uml>")